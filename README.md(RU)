
# Telegram Bot SLA

## Описание

Telegram Bot SLA — это инструмент, разработанный для упрощения взаимодействий между клиентами и командами поддержки, а также автоматизации обработки запросов в чатах. Бот помогает соблюдать SLA (Service Level Agreement), уведомляет о нарушениях времени ответа и предоставляет отчёты об активности участников команды.

## Основные функции

### Создание задач

- Бот автоматически создаёт задачи, когда клиенты отправляют сообщения в чатах.
- Если на сообщение клиента нет ответа, бот отслеживает время до нарушения SLA.

### Закрытие задач

- Если сотрудник поддержки или администратор отвечает клиенту, задача автоматически закрывается.
- Задачи также можно закрывать вручную с помощью команды `/close`.

### Уведомления

- Бот отправляет уведомления по мере приближения срока нарушения SLA.
- Уведомления отправляются за 15, 10 и 5 минут до нарушения SLA.

### Управление ролями

- Администраторы могут добавлять/удалять пользователей из ролей:
  - `support` — сотрудники поддержки.
  - `admin` — администраторы.
  - `sales` — сотрудники отдела продаж.

#### Команды управления:

- `/add_staff` — добавить сотрудника поддержки.
- `/remove_staff` — удалить сотрудника поддержки.
- `/add_admin` — добавить администратора.
- `/remove_admin` — удалить администратора.
- `/add_sales` — добавить сотрудника отдела продаж.
- `/remove_sales` — удалить сотрудника отдела продаж.

### Отчёты

- Еженедельный отчёт об активности:
  - Статистика активности сотрудников поддержки.
  - Количество нарушений SLA.
- Отчёт автоматически отправляется в определённый чат по расписанию.

### Рабочие часы

- Бот работает только в рабочие часы (07:00–23:00 по будням, 10:00–19:00 по выходным).
- Уведомления и обработка задач происходят только в это время.

### Интеграция с базой данных

- Для хранения информации о задачах, ролях и логах активности используется PostgreSQL.

## Команды

| Команда          | Описание                                                     |
|------------------|-------------------------------------------------------------|
| `/start`         | Приветственное сообщение с информацией о вашей роли.         |
| `/add_staff`     | Добавить сотрудника поддержки (требуется роль admin).        |
| `/remove_staff`  | Удалить сотрудника поддержки (требуется роль admin).         |
| `/add_admin`     | Добавить администратора (требуется роль admin).              |
| `/remove_admin`  | Удалить администратора (требуется роль admin).               |
| `/add_sales`     | Добавить сотрудника отдела продаж (требуется роль admin).    |
| `/remove_sales`  | Удалить сотрудника отдела продаж (требуется роль admin).     |
| `/check_roles`   | Проверить свою текущую роль.                                 |
| `/close`         | Закрыть задачу вручную, указав название чата.                |

## Технические детали

### Интеграция с базой данных

- PostgreSQL используется для хранения данных:
  - Таблица `staff` для управления ролями.
  - Таблица `tasks` для отслеживания задач.
  - Таблица `support_activity` для сбора статистики активности.

### Docker

- Проект контейнеризован с использованием Docker и Docker Compose.
- Контейнеры:
  - `bot` — основная логика бота.
  - `db` — база данных PostgreSQL.

### Шифрование данных

- Для безопасности используется шифрование ключей и токенов.

### Рабочие часы

- Задачи создаются и обрабатываются только в рабочие часы.
- Задачи, созданные вне рабочего времени, будут обработаны на следующий рабочий день.

### Уведомления

- Уведомления о нарушении SLA отправляются в определённый чат.

## Установка

### Клонируйте репозиторий

```bash
git clone https://github.com/MihaRS2/TG_Bot_SLA.git
cd TG_Bot_SLA
```

### Создайте файл `.env`

Создайте файл `.env` в корневом каталоге проекта с параметрами:

```
BOT_TOKEN=your_bot_token
DB_USER=postgres
DB_PASSWORD=your_database_password
DB_NAME=telegram_bot_db
DB_HOST=db
DB_PORT=5432
ENCRYPTION_KEY=your_encryption_key
NOTIFICATION_GROUP_ID=your_notification_group_id
```

### Запустите Docker Compose

Убедитесь, что Docker и Docker Compose установлены:

```bash
docker-compose up -d
```

### Генерация ключей шифрования

Запустите скрипт `generate_key.py` для генерации ключа шифрования:

```bash
python3 app/generate_key.py
```

### Шифрование токенов

Используйте скрипты `encrypt_data.py` и `encrypt_token.py` для шифрования токена бота и других конфиденциальных данных.

## Использование

1. Добавьте бота в чаты, где он будет отслеживать сообщения клиентов.
2. Настройте роли пользователей с помощью соответствующих команд.
3. Следите за уведомлениями SLA в указанном чате.
4. Получайте еженедельные отчёты об активности автоматически.

## Ограничения

Для корректной работы требуется PostgreSQL.
